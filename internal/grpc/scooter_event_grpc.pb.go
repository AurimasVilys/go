// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: grpc/proto/scooter_event.proto

package scootin_internal_grpc_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ScooterEventService_Create_FullMethodName = "/scootin.grpc.proto.ScooterEventService/Create"
	ScooterEventService_Get_FullMethodName    = "/scootin.grpc.proto.ScooterEventService/Get"
)

// ScooterEventServiceClient is the client API for ScooterEventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScooterEventServiceClient interface {
	Create(ctx context.Context, in *CreateScooterEvent, opts ...grpc.CallOption) (*ScooterEvent, error)
	Get(ctx context.Context, in *GetScooterEvent, opts ...grpc.CallOption) (*ScooterEvent, error)
}

type scooterEventServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewScooterEventServiceClient(cc grpc.ClientConnInterface) ScooterEventServiceClient {
	return &scooterEventServiceClient{cc}
}

func (c *scooterEventServiceClient) Create(ctx context.Context, in *CreateScooterEvent, opts ...grpc.CallOption) (*ScooterEvent, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScooterEvent)
	err := c.cc.Invoke(ctx, ScooterEventService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scooterEventServiceClient) Get(ctx context.Context, in *GetScooterEvent, opts ...grpc.CallOption) (*ScooterEvent, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScooterEvent)
	err := c.cc.Invoke(ctx, ScooterEventService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScooterEventServiceServer is the server API for ScooterEventService service.
// All implementations must embed UnimplementedScooterEventServiceServer
// for forward compatibility.
type ScooterEventServiceServer interface {
	Create(context.Context, *CreateScooterEvent) (*ScooterEvent, error)
	Get(context.Context, *GetScooterEvent) (*ScooterEvent, error)
	mustEmbedUnimplementedScooterEventServiceServer()
}

// UnimplementedScooterEventServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedScooterEventServiceServer struct{}

func (UnimplementedScooterEventServiceServer) Create(context.Context, *CreateScooterEvent) (*ScooterEvent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedScooterEventServiceServer) Get(context.Context, *GetScooterEvent) (*ScooterEvent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedScooterEventServiceServer) mustEmbedUnimplementedScooterEventServiceServer() {}
func (UnimplementedScooterEventServiceServer) testEmbeddedByValue()                             {}

// UnsafeScooterEventServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScooterEventServiceServer will
// result in compilation errors.
type UnsafeScooterEventServiceServer interface {
	mustEmbedUnimplementedScooterEventServiceServer()
}

func RegisterScooterEventServiceServer(s grpc.ServiceRegistrar, srv ScooterEventServiceServer) {
	// If the following call pancis, it indicates UnimplementedScooterEventServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ScooterEventService_ServiceDesc, srv)
}

func _ScooterEventService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateScooterEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScooterEventServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScooterEventService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScooterEventServiceServer).Create(ctx, req.(*CreateScooterEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScooterEventService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScooterEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScooterEventServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScooterEventService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScooterEventServiceServer).Get(ctx, req.(*GetScooterEvent))
	}
	return interceptor(ctx, in, info, handler)
}

// ScooterEventService_ServiceDesc is the grpc.ServiceDesc for ScooterEventService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScooterEventService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scootin.grpc.proto.ScooterEventService",
	HandlerType: (*ScooterEventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ScooterEventService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ScooterEventService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/proto/scooter_event.proto",
}
